2022-07-19 11:15:01,088 - __main__ - INFO - Token value: Token not available!
2022-07-19 11:15:01,760 - __main__ - INFO - Weather in Berlin: 30.32
2022-07-19 10:09:58,525 - __main__ - INFO - Token value: 1234
2022-07-19 10:09:58,949 - __main__ - INFO - Weather in Berlin: 32.56
2022-07-19 12:17:50,405 - __main__ - INFO - Token value: 1234
2022-07-19 12:17:50,875 - __main__ - INFO - Weather in Berlin: 33.66
2022-07-19 14:09:00,868 - __main__ - INFO - Token value: 1234
2022-07-19 14:09:01,435 - __main__ - INFO - Weather in Berlin: 34.86
2022-07-19 16:12:16,906 - __main__ - INFO - Token value: 1234
2022-07-19 16:12:17,306 - __main__ - INFO - Weather in Berlin: 34.28
2022-07-19 18:10:53,682 - __main__ - INFO - Token value: 1234
2022-07-19 18:10:53,844 - __main__ - INFO - Weather in Berlin: 31.9
2022-07-19 20:09:35,027 - __main__ - INFO - Token value: 1234
2022-07-19 20:09:35,139 - __main__ - INFO - Weather in Berlin: 27.52
2022-07-19 22:09:04,334 - __main__ - INFO - Token value: 1234
2022-07-19 22:09:04,912 - __main__ - INFO - Weather in Berlin: 25.4
2022-07-20 00:46:12,649 - __main__ - INFO - Token value: 1234
2022-07-20 00:46:13,296 - __main__ - INFO - Weather in Berlin: 24.18
2022-07-20 03:36:18,748 - __main__ - INFO - Token value: 1234
2022-07-20 03:36:18,916 - __main__ - INFO - Weather in Berlin: 22.12
2022-07-20 04:30:43,477 - __main__ - INFO - Token value: 1234
2022-07-20 04:30:43,776 - __main__ - INFO - Weather in Berlin: 21.64
2022-07-20 06:11:40,340 - __main__ - INFO - Token value: 1234
2022-07-20 06:11:41,194 - __main__ - INFO - Weather in Berlin: 24.95
2022-07-20 08:12:25,109 - __main__ - INFO - Token value: 1234
2022-07-20 08:12:25,397 - __main__ - INFO - Weather in Berlin: 30.85
2022-07-20 10:09:27,874 - __main__ - INFO - Token value: 1234
2022-07-20 10:09:28,041 - __main__ - INFO - Weather in Berlin: 35.42
2022-07-20 12:16:14,801 - __main__ - INFO - Token value: 1234
2022-07-20 12:16:15,447 - __main__ - INFO - Weather in Berlin: 36.64
2022-07-20 14:10:42,143 - __main__ - INFO - Token value: 1234
2022-07-20 14:10:42,285 - __main__ - INFO - Weather in Berlin: 37.34
2022-07-20 16:11:32,101 - __main__ - INFO - Token value: 1234
2022-07-20 16:11:32,270 - __main__ - INFO - Weather in Berlin: 36.32
2022-07-20 18:11:08,871 - __main__ - INFO - Token value: 1234
2022-07-20 18:11:09,450 - __main__ - INFO - Weather in Berlin: 35.75
2022-07-20 20:10:07,208 - __main__ - INFO - Token value: 1234
2022-07-20 20:10:07,807 - __main__ - INFO - Weather in Berlin: 29.16
2022-07-20 22:08:32,880 - __main__ - INFO - Token value: 1234
2022-07-20 22:08:33,309 - __main__ - INFO - Weather in Berlin: 27.72
2022-07-21 00:51:04,670 - __main__ - INFO - Token value: 1234
2022-07-21 00:51:04,945 - __main__ - INFO - Weather in Berlin: 25.62
2022-07-21 03:32:21,183 - __main__ - INFO - Token value: 1234
2022-07-21 03:32:21,622 - __main__ - INFO - Weather in Berlin: 24.17
2022-07-21 04:33:49,059 - __main__ - INFO - Token value: 1234
2022-07-21 04:33:49,712 - __main__ - INFO - Weather in Berlin: 23.8
2022-07-21 06:11:40,676 - __main__ - INFO - Token value: 1234
2022-07-21 06:11:41,078 - __main__ - INFO - Weather in Berlin: 24.1
2022-07-21 08:11:51,774 - __main__ - INFO - Token value: 1234
2022-07-21 08:11:51,925 - __main__ - INFO - Weather in Berlin: 26.61
2022-07-21 10:10:48,231 - __main__ - INFO - Token value: 1234
2022-07-21 10:10:48,658 - __main__ - INFO - Weather in Berlin: 29.39
2022-07-21 12:16:51,452 - __main__ - INFO - Token value: 1234
2022-07-21 12:16:52,210 - __main__ - INFO - Weather in Berlin: 29.02
2022-07-21 14:10:13,059 - __main__ - INFO - Token value: 1234
2022-07-21 14:10:13,760 - __main__ - INFO - Weather in Berlin: 24.62
2022-07-21 16:11:48,481 - __main__ - INFO - Token value: 1234
2022-07-21 16:11:49,254 - __main__ - INFO - Weather in Berlin: 24.51
2022-07-21 18:11:19,590 - __main__ - INFO - Token value: 1234
2022-07-21 18:11:19,965 - __main__ - INFO - Weather in Berlin: 25.79
2022-07-21 20:10:30,244 - __main__ - INFO - Token value: 1234
2022-07-21 20:10:30,328 - __main__ - INFO - Weather in Berlin: 22.77
2022-07-25 00:44:39,700 - __main__ - INFO - Token value: 1234
2022-07-25 00:44:40,082 - __main__ - INFO - Weather in Berlin: 19.9
2022-08-01 00:54:12,206 - __main__ - INFO - Token value: 1234
2022-08-01 00:54:12,694 - __main__ - INFO - Weather in Berlin: 20.23
2022-08-08 00:40:42,506 - __main__ - INFO - Token value: 1234
2022-08-08 00:40:42,610 - __main__ - INFO - Weather in Berlin: 16.92
2022-08-15 00:44:48,218 - __main__ - INFO - Token value: 1234
2022-08-15 00:44:48,828 - __main__ - INFO - Weather in Berlin: 22.05
2022-08-22 00:46:22,483 - __main__ - INFO - Token value: 1234
2022-08-22 00:46:22,604 - __main__ - INFO - Weather in Berlin: 16.54
2022-08-29 00:51:03,885 - __main__ - INFO - Token value: 1234
2022-08-29 00:51:04,463 - __main__ - INFO - Weather in Berlin: 13.61
2022-09-05 00:54:44,539 - __main__ - INFO - Token value: 1234
2022-09-05 00:54:45,065 - __main__ - INFO - Weather in Berlin: 15.8
2022-09-12 00:48:56,255 - __main__ - INFO - Token value: 1234
2022-09-12 00:48:56,362 - __main__ - INFO - Weather in Berlin: 12.68
2022-09-19 00:51:28,986 - __main__ - INFO - Token value: 1234
2022-09-19 00:51:29,073 - __main__ - INFO - Weather in Berlin: 8.79
2022-09-26 00:54:36,285 - __main__ - INFO - Token value: 1234
2022-09-26 00:54:36,670 - __main__ - INFO - Weather in Berlin: 11.75
2022-10-03 00:53:53,511 - __main__ - INFO - Token value: 1234
2022-10-03 00:53:54,115 - __main__ - INFO - Weather in Berlin: 11.07
2022-10-10 00:59:22,592 - __main__ - INFO - Token value: 1234
2022-10-10 00:59:22,684 - __main__ - INFO - Weather in Berlin: 7.73
2022-10-17 01:03:34,041 - __main__ - INFO - Token value: 1234
2022-10-17 01:03:34,808 - __main__ - INFO - Weather in Berlin: 13.02
2022-10-24 01:05:23,964 - __main__ - INFO - Token value: 1234
2022-10-24 01:05:24,197 - __main__ - INFO - Weather in Berlin: 13.27
2022-10-31 00:56:50,347 - __main__ - INFO - Token value: 1234
2022-10-31 00:56:50,781 - __main__ - INFO - Weather in Berlin: 13.45
2022-11-07 00:46:30,914 - __main__ - INFO - Token value: 1234
2022-11-07 00:46:31,482 - __main__ - INFO - Weather in Berlin: 6.9
2022-11-14 00:42:53,014 - __main__ - INFO - Token value: 1234
2022-11-14 00:42:53,136 - __main__ - INFO - Weather in Berlin: 6.58
2022-11-21 00:44:54,383 - __main__ - INFO - Token value: 1234
2022-11-21 00:44:54,891 - __main__ - INFO - Weather in Berlin: -1.89
2022-11-28 00:38:10,868 - __main__ - INFO - Token value: 1234
2022-11-28 00:38:10,962 - __main__ - INFO - Weather in Berlin: 4.03
2022-12-05 00:37:36,747 - __main__ - INFO - Token value: 1234
2022-12-05 00:37:37,346 - __main__ - INFO - Weather in Berlin: 2.48
2022-12-12 00:40:48,194 - __main__ - INFO - Token value: 1234
2022-12-12 00:40:48,347 - __main__ - INFO - Weather in Berlin: -1.51
2022-12-19 00:34:22,668 - __main__ - INFO - Token value: 1234
2022-12-19 00:34:23,349 - __main__ - INFO - Weather in Berlin: -4.73
2022-12-26 00:37:57,455 - __main__ - INFO - Token value: 1234
2022-12-26 00:37:58,555 - __main__ - INFO - Weather in Berlin: 8.58
2023-01-02 00:37:45,571 - __main__ - INFO - Token value: 1234
2023-01-02 00:37:46,198 - __main__ - INFO - Weather in Berlin: 11.86
2023-01-09 00:37:48,669 - __main__ - INFO - Token value: 1234
2023-01-09 00:37:49,006 - __main__ - INFO - Weather in Berlin: 5.01
2023-01-16 00:38:39,973 - __main__ - INFO - Token value: 1234
2023-01-16 00:38:40,358 - __main__ - INFO - Weather in Berlin: 4.9
2023-01-23 00:37:11,897 - __main__ - INFO - Token value: 1234
2023-01-23 00:37:12,431 - __main__ - INFO - Weather in Berlin: 1.65
2023-01-30 00:35:30,776 - __main__ - INFO - Token value: 1234
2023-01-30 00:35:31,351 - __main__ - INFO - Weather in Berlin: 1.63
2023-02-06 00:37:40,919 - __main__ - INFO - Token value: 1234
2023-02-06 00:37:41,397 - __main__ - INFO - Weather in Berlin: -2.01
2023-02-13 00:41:55,645 - __main__ - INFO - Token value: 1234
2023-02-13 00:41:56,334 - __main__ - INFO - Weather in Berlin: 7.16
2023-02-20 00:42:40,136 - __main__ - INFO - Token value: 1234
2023-02-20 00:42:40,714 - __main__ - INFO - Weather in Berlin: 2.39
2023-02-27 00:41:12,914 - __main__ - INFO - Token value: 1234
2023-02-27 00:41:13,506 - __main__ - INFO - Weather in Berlin: -1.34
2023-03-06 00:41:41,381 - __main__ - INFO - Token value: 1234
2023-03-06 00:41:41,518 - __main__ - INFO - Weather in Berlin: 0.94
2023-03-13 00:39:58,538 - __main__ - INFO - Token value: 1234
2023-03-13 00:39:58,984 - __main__ - INFO - Weather in Berlin: 5.94
2023-03-20 00:40:52,346 - __main__ - INFO - Token value: 1234
2023-03-20 00:40:52,864 - __main__ - INFO - Weather in Berlin: 10.36
2023-03-27 00:37:03,135 - __main__ - INFO - Token value: 1234
2023-03-27 00:37:03,579 - __main__ - INFO - Weather in Berlin: 4.49
2023-04-07 02:26:24,041 - __main__ - INFO - Token value: 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
2023-04-07 02:26:24,548 - __main__ - INFO - Weather in Berlin: 2.21
2023-04-07 02:26:24,548 - __main__ - INFO - PR value: 1
2023-04-07 02:26:24,548 - __main__ - INFO - BRANCH value: refs/heads/testbranch
2023-04-07 02:26:24,548 - __main__ - INFO - REPO value: rohitmohan7/CodeReviewer
2023-04-07 02:26:25,334 - __main__ - INFO - REPO file name: net_util.cpp
2023-04-07 02:26:25,830 - __main__ - INFO - REPO patch: @@ -24,6 +24,9 @@
 #else
 #include <linux/if_vlan.h>
 #include <linux/sockios.h>
+#include <linux/if_ether.h>
+#include <net/if_arp.h>
+#include <netdb.h>
 #endif
 #include <sys/ioctl.h>
 #include <unistd.h>
@@ -353,9 +356,7 @@ int GetIfaceFlags( const std::string &name, unsigned long &flags, size_t fib ) {
     return 0;
 }
 
-
-#ifdef __QNXNTO__
-static int SetIfaceFlags( const std::string &name, long flag, size_t fib ) {
+int SetIfaceFlags( const std::string &name, long flag, size_t fib ) {
     struct ifreq ifr{};
     if (name.length() >= sizeof ifr.ifr_name) {
         return EINVAL;
@@ -394,7 +395,6 @@ static int SetIfaceFlags( const std::string &name, long flag, size_t fib ) {
     loggerSp.i( "Iface flags set, interface name: %s.",  name.c_str());
     return 0;
 }
-#endif
 
 static int SetIfaceAddrField( const std::string &name, unsigned long request, const struct sockaddr_in &sa, size_t fib ) {
     struct ifreq ifr{};
@@ -729,7 +729,115 @@ int SetIfaceAddr( const std::string &name, const std::string &addr_string, size_
     return 0;
 }
 
-#ifdef __QNXNTO__
+#ifndef __QNXNTO__
+/* Input an Ethernet address and convert to binary. */
+static int in_ether(char *bufp, struct sockaddr *sap)
+{
+    unsigned char *ptr;
+    char c;
+    char *orig;
+    int i;
+    unsigned val;
+
+    sap->sa_family = ARPHRD_ETHER;
+    ptr = (unsigned char *) sap->sa_data;
+
+    i = 0;
+    orig = bufp;
+    while ((*bufp != '\0') && (i < ETH_ALEN)) {
+        val = 0;
+        c = *bufp++;
+        if (isdigit(c)) {
+            val = c - '0';
+        } else if ((c >= 'a') && (c <= 'f')) {
+            val =(c - 'a') + 10;
+        } else if ((c >= 'A') && (c <= 'F')) {
+            val = (c - 'A') + 10;
+        } else {
+            logger.e("in_ether(%s): invalid ether address!\n", orig);
+            errno = EINVAL;
+            return -1;
+        }
+        val <<= 4;
+        c = *bufp;
+        if (isdigit(c)) {
+            val |= c - '0';
+        } else if ((c >= 'a') && (c <= 'f')) {
+            val |= (c - 'a') + 10;
+        } else if ((c >= 'A') && (c <= 'F')) {
+            val |= (c - 'A') + 10;
+        } else if ((c == ':') || (c == 0)) {
+            val >>= 4;
+        } else {
+            logger.e("in_ether(%s): invalid ether address!\n", orig);
+            errno = EINVAL;
+            return -1;
+        }
+        if (c != 0) {
+            bufp++;
+        }
+        *ptr++ = static_cast<unsigned char> (val & 0377);
+        i++;
+
+        /* We might get a semicolon here - not required. */
+        if (*bufp == ':') {
+            if (i == ETH_ALEN) {
+                logger.e("in_ether(%s): trailing : ignored!", orig);		/* nothing */
+            }
+            bufp++;
+        }
+    }
+
+    /* That's it.  Any trailing junk? */
+    if ((i == ETH_ALEN) && (*bufp != '\0')) {
+        logger.e("in_ether(%s): trailing junk!\n", orig);
+        errno = EINVAL;
+        return -1;
+    }
+    return 0;
+}
+
+int SetIfaceHwAddr( const std::string &name, const std::string &addr_string, size_t fib ) {
+    struct ifreq ifr{};
+    struct sockaddr sa{};
+    int rc = 0;
+
+    if (name.length() >= sizeof ifr.ifr_name || name.length() == 0 || addr_string.length() == 0) {
+        return EINVAL;
+    }
+    strncpy( ifr.ifr_name, name.c_str(), sizeof ifr.ifr_name - 1);
+
+    char host[128];
+    strncpy( host, addr_string.c_str(), (sizeof host) );
+
+    if (in_ether(host, &sa) < 0) {
+        logger.e("%s: invalid ether address.", host);
+        return EINVAL;
+    }
+
+    memcpy((char *) &ifr.ifr_hwaddr, (char *) &sa,
+           sizeof(struct sockaddr));
+
+    const int sockfd = AllocateInetSocket( fib, &rc );
+    if (sockfd==-1) {
+        return rc; //NOSONAR
+    }
+
+    if (ioctl(sockfd, SIOCSIFHWADDR, &ifr) < 0) {
+        rc = errno;
+        if (rc == EBUSY) {
+            logger.e("SIOCSIFHWADDR: %s - you may need to down the interface",
+                strerror(errno));
+        } else {
+            logger.e("SIOCSIFHWADDR: %s",
+                strerror(errno));
+        }
+    }
+
+    return rc;
+}
+#endif
+
 int DelIfaceAddr( const std::string &name, size_t fib ) {
     int rc = SetIfaceAddrField( name, SIOCDIFADDR, "", fib );
     if (rc) {
@@ -740,7 +848,6 @@ int DelIfaceAddr( const std::string &name, size_t fib ) {
     loggerSp.i( "Address deleted, interface name: %s.", name.c_str() );
     return 0;
 }
-#endif
 
 int SetIfaceNetPrefixLen( const std::string &name, size_t len, size_t fib ) {
     if (len>BITS_IN_IPV4ADDR) {
@@ -858,5 +965,218 @@ int DelDefRoute( __attribute__((unused)) const std::string &gateway,
 }
 #endif
 
+
+#ifndef __QNXNTO__
+
+static int INET_resolve(char *name, struct sockaddr_in *sin, int hostfirst)
+{
+    struct hostent *hp;
+    struct netent *np;
+
+    /* Grmpf. -FvK */
+    sin->sin_family = AF_INET;
+    sin->sin_port = 0;
+
+    /* Default is special, meaning 0.0.0.0. */
+    if (!strcmp(name, "default")) {
+        sin->sin_addr.s_addr = INADDR_ANY;
+        return 1;
+    }
+    /* Look to see if it's a dotted quad. */
+    if (inet_aton(name, &sin->sin_addr)) {
+        return 0;
+    }
+    /* If we expect this to be a hostname, try hostname database first */
+
+    if (hostfirst) {
+        logger.i ("gethostbyname (%s)", name);
+    }
+
+    if (hostfirst && 
+    ((hp = gethostbyname(name)) != static_cast<struct hostent *>(NULL))) {
+        memcpy((char *) &sin->sin_addr, (char *) hp->h_addr_list[0], 
+        sizeof(struct in_addr));
+        return 0;
+    }
+    /* Try the NETWORKS database to see if this is a known network. */
+    logger.i ("getnetbyname (%s)", name);
+
+    if ((np = getnetbyname(name)) != static_cast<struct netent *> (NULL)) {
+        sin->sin_addr.s_addr = htonl(np->n_net);
+        return 1;
+    }
+    if (hostfirst) {
+        /* Don't try again */
+        errno = h_errno;
+        return -1;
+    }
+
+    logger.i ("gethostbyname (%s)", name);
+
+    if ((hp = gethostbyname(name)) == static_cast<struct hostent *>(NULL)) {
+        errno = h_errno;
+        return -1;
+    }
+    memcpy((char *) &sin->sin_addr, (char *) hp->h_addr_list[0], 
+       sizeof(struct in_addr));
+
+    return 0;
+}
+
+static void INET_reserror(char *text)
+{
+    herror(text);
+}
+
+int ArpSet( const std::string &host_name, const std::string &addr, const std::string& device, size_t fib ) {
+    char host[128];
+    struct arpreq req;
+    struct sockaddr_storage ss;
+    struct sockaddr *sa;
+
+
+    memset((char *) &req, 0, sizeof(req));
+
+    /* Resolve the host name. */
+    if (host_name.length() == 0) {
+        logger.e("arp: need host name");
+        return EINVAL;
+    }
+    strncpy(host, host_name.c_str(), (sizeof host));
+    sa = (struct sockaddr *) &ss;
+    if (INET_resolve(host, (struct sockaddr_in *) sa, 0) < 0) {
+        INET_reserror(host);
+        logger.e("arp: invalid host name: %s", host_name.c_str());
+        return EINVAL;
+    }
+    /* If a host has more than one address, use the correct one! */
+    memcpy((char *) &req.arp_pa, (char *) sa, sizeof(struct sockaddr));
+
+    /* Fetch the hardware address. */
+    if (addr.length() == 0) {
+        logger.e("arp: need hardware address");
+        return EINVAL;
+    }
+
+    if (in_ether((char *) addr.c_str(), &req.arp_ha) < 0) {
+        logger.e("arp: invalid hardware address: %s", addr.c_str());
+        return EINVAL;
+    }
+
+    /* Fill in the remainder of the request. */
+    req.arp_flags = ATF_PERM | ATF_COM;
+
+    if (device.length() > 0) {
+        strcpy(req.arp_dev, device.c_str());
+    }
+
+    int sockrc;
+    const int sockfd = AllocateInetSocket( fib, &sockrc );
+    if (sockfd==-1) {
+        return sockrc; //NOSONAR
+    }
+
+    /* Call the kernel. */
+    logger.i("arp: SIOCSARP()\n");
+    if (ioctl(sockfd, SIOCSARP, &req) < 0) {
+        logger.e("arp: SIOCSARP error: %d", errno);
+        return errno;
+    }
+    return 0;
+}
+#else
+int ArpSet( __attribute__((unused)) const std::string &host,
+            __attribute__((unused)) const std::string &addr,
+            __attribute__((unused)) const std::string &device,
+            __attribute__((unused)) size_t fib ) {
+    return ENOTSUP;
+}
+#endif
+
+#ifndef __QNXNTO__
+void dontpub( arpreq& req, const int& sockfd, char* host ) {
+    req.arp_flags |= ATF_PUBL;
+
+    if (ioctl(sockfd, SIOCDARP, &req) < 0) {
+        if ((errno == ENXIO) || (errno == ENOENT)) {
+            logger.e("No ARP entry for %s\n", host);
+            return;
+        }
+        logger.i("SIOCDARP(pub) flags & 1");
+    }
+}
+int ArpDel( const std::string &host_name, const std::string& device, size_t fib ) {
+    char host[128];
+    struct arpreq req;
+    struct sockaddr_storage ss;
+    struct sockaddr *sa;
+    int flags = 0;
+    int deleted = 0;
+
+    memset((char *) &req, 0, sizeof(req));
+
+    /* Resolve the host name. */
+    if (host_name.length() == 0) {
+        logger.e("arp: need host name");
+        return -1;
+    }
+    strncpy(host, host_name.c_str(), (sizeof host));
+    sa = (struct sockaddr *) &ss;
+    if (INET_resolve(host, (struct sockaddr_in *) sa, 0) < 0) {
+        INET_reserror(host);
+        return -1;
+    }
+    /* If a host has more than one address, use the correct one! */
+    memcpy((char *) &req.arp_pa, (char *) sa, sizeof(struct sockaddr));
+
+    req.arp_flags = ATF_PERM;
+
+    // if neighter priv nor pub is given, work on both
+    flags = 3;
+
+    if (device.length() > 0) {
+        strcpy(req.arp_dev, device.c_str());
+    }
+ 
+    /* unfortuatelly the kernel interface does not allow us to
+       delete private entries anlone, so we need this hack
+       to avoid "not found" errors if we try both. */
+    deleted = 0;
+
+    int rcerrno = 0;
+    const int sockfd = AllocateInetSocket( fib, &rcerrno );
+    if (sockfd==-1) {
+        return rcerrno;
+    }
+
+    /* Call the kernel. */
+    if (flags & 2) {
+        if (ioctl(sockfd, SIOCDARP, &req) < 0) {
+            if ((errno == ENXIO) || (errno == ENOENT)) {
+                if (flags & 1) {
+                    dontpub(req, sockfd, host);
+                }
+                logger.e("No ARP entry for %s", host);
+                return -1;
+            }
+            logger.e("SIOCDARP(dontpub)");
+            return -1;
+        } else {
+            deleted = 1;
+        }
+    }
+    if (!deleted && (flags & 1)) {
+        dontpub(req, sockfd, host);
+    }
+    return 0;
+}
+#else
+int ArpDel( __attribute__((unused)) const std::string &host,
+            __attribute__((unused)) const std::string &device,
+            __attribute__((unused)) size_t fib ) {
+    return ENOTSUP;
 }
+#endif
+
 }
+}
\ No newline at end of file
2023-04-07 02:26:25,831 - __main__ - INFO - REPO file name: net_util.h
2023-04-07 02:26:26,195 - __main__ - INFO - REPO patch: @@ -12,9 +12,14 @@
 // it, use it, or disclose the information contained in it without
 // the written authorization of Ford Motor Company.
 //
+#ifndef NETUTIL_HPP_
+#define NETUTIL_HPP_
+
+#include <string>
 
 namespace fnv {
 namespace vnm {
+    static const std::string empty = std::string();
 
     std::string GetIfAddress( const std::string &ifnm, size_t fibno=0 );
     std::string FindIfName( const std::string &ipaddr, size_t fibno );
@@ -34,6 +39,7 @@ namespace vnm {
     int DeleteTunnel( const std::string &name, size_t fib=0 );
     int SetIfaceLink1Flag( const std::string &name, size_t fib=0 );
     int GetIfaceFlags( const std::string &name, unsigned long &flags, size_t fib=0 );
+    int SetIfaceFlags( const std::string &name, long flag, size_t fib=0 );
     int SetIfaceAddr( const std::string &name, const std::string &addr_string, size_t fib=0 );
     int DelIfaceAddr( const std::string &name, size_t fib=0 );
     int SetIfaceNetPrefixLen( const std::string &name, size_t len, size_t fib=0 );
@@ -43,6 +49,8 @@ namespace vnm {
     int SetIfaceVlan( const std::string &name, const std::string &parentifnm, int id, size_t fib=0 );
     int AddDefRoute( const std::string &gateway, size_t fib=0 );
     int DelDefRoute( const std::string &gateway, size_t fib=0 );
-
+    int SetIfaceHwAddr( const std::string &name, const std::string &addr_string, size_t fib=0 );
+    int ArpSet( const std::string &host_name, const std::string &addr, const std::string& device=empty, size_t fib=0 );
+    int ArpDel( const std::string &host_name, const std::string& device=empty, size_t fib=0 );
 } // vnm
 } // fnv
